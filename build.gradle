plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.2"
    id 'maven-publish'
}

def javaVersion = JavaVersion.VERSION_17

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

def ROBOT_MAIN_CLASS = "com.logandhillon.frc.checkmate.dev.SimulatorEntrypoint"

group = "com.logandhillon"
version = "1.0.0-rc.1"

deploy {
    //noinspection GroovyAssignabilityCheck
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {}
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

wpi.java.debugJni = false
def includeDesktopSupport = false

dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)
    
    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()
}

// sim config
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest {
        attributes(
            'Main-Class': ROBOT_MAIN_CLASS
        )
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile) {
    // Configure string concat to always inline compile
    options.compilerArgs.add '-XDstringConcat=inline'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "frc-checkmate"
            groupId = group
            version = version

            from components.java

            pom {
                name = 'FRC Checkmate'
                description = 'A concise description of my library'
                url = 'https://github.com/logandhillon/frc-checkmate'

                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE, Version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'logandhillon'
                        name = 'Logan Dhillon'
                        email = 'dev@logandhillon.com'
                    }
                }
            }
        }
    }
}